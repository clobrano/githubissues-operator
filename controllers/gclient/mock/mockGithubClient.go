// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/gclient/gclient.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gclient "github.com/clobrano/githubissues-operator/controllers/gclient"
	gomock "github.com/golang/mock/gomock"
)

// MockGithubClient is a mock of GithubClient interface.
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient.
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance.
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockGithubClient) CreateTicket(arg0 gclient.GithubTicket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockGithubClientMockRecorder) CreateTicket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockGithubClient)(nil).CreateTicket), arg0)
}

// GetTickets mocks base method.
func (m *MockGithubClient) GetTickets(arg0 string) ([]gclient.GithubTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", arg0)
	ret0, _ := ret[0].([]gclient.GithubTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockGithubClientMockRecorder) GetTickets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockGithubClient)(nil).GetTickets), arg0)
}

// IssueHasPR mocks base method.
func (m *MockGithubClient) IssueHasPR(arg0 gclient.GithubTicket) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueHasPR", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IssueHasPR indicates an expected call of IssueHasPR.
func (mr *MockGithubClientMockRecorder) IssueHasPR(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueHasPR", reflect.TypeOf((*MockGithubClient)(nil).IssueHasPR), arg0)
}

// UpdateTicket mocks base method.
func (m *MockGithubClient) UpdateTicket(arg0 gclient.GithubTicket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockGithubClientMockRecorder) UpdateTicket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockGithubClient)(nil).UpdateTicket), arg0)
}
